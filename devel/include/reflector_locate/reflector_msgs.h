// Generated by gencpp from file reflector_locate/reflector_msgs.msg
// DO NOT EDIT!


#ifndef REFLECTOR_LOCATE_MESSAGE_REFLECTOR_MSGS_H
#define REFLECTOR_LOCATE_MESSAGE_REFLECTOR_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace reflector_locate
{
template <class ContainerAllocator>
struct reflector_msgs_
{
  typedef reflector_msgs_<ContainerAllocator> Type;

  reflector_msgs_()
    : id(0)
    , ref_pose()  {
    }
  reflector_msgs_(const ContainerAllocator& _alloc)
    : id(0)
    , ref_pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _ref_pose_type;
  _ref_pose_type ref_pose;





  typedef boost::shared_ptr< ::reflector_locate::reflector_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflector_locate::reflector_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct reflector_msgs_

typedef ::reflector_locate::reflector_msgs_<std::allocator<void> > reflector_msgs;

typedef boost::shared_ptr< ::reflector_locate::reflector_msgs > reflector_msgsPtr;
typedef boost::shared_ptr< ::reflector_locate::reflector_msgs const> reflector_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflector_locate::reflector_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflector_locate::reflector_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace reflector_locate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'reflector_locate': ['/home/yujingge/Luckybot_ws/src/reflector_locate/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_locate::reflector_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflector_locate::reflector_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_locate::reflector_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ffbf8bb0ea508bbc2abd2bd6aa4aeda";
  }

  static const char* value(const ::reflector_locate::reflector_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ffbf8bb0ea508bbULL;
  static const uint64_t static_value2 = 0xc2abd2bd6aa4aedaULL;
};

template<class ContainerAllocator>
struct DataType< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflector_locate/reflector_msgs";
  }

  static const char* value(const ::reflector_locate::reflector_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "########################################\n"
"# Messages\n"
"########################################\n"
"uint8 id \n"
"geometry_msgs/Point[] ref_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::reflector_locate::reflector_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.ref_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct reflector_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflector_locate::reflector_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflector_locate::reflector_msgs_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "ref_pose[]" << std::endl;
    for (size_t i = 0; i < v.ref_pose.size(); ++i)
    {
      s << indent << "  ref_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.ref_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLECTOR_LOCATE_MESSAGE_REFLECTOR_MSGS_H
